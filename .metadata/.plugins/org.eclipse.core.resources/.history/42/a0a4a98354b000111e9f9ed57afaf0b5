import java.util.*;
import java.io.*;

import twitter4j.*;
public class TrendingTweetPuller {
	public static void main(String[] args) throws TwitterException {
		TweetHashTable tweetTable = null;
		TwitterFactory twitterFactory = new TwitterFactory();
        Twitter twitter = twitterFactory.getInstance();
        ResponseList<Trends> trendsList;
        Query query;
        File superTweetFile = new File("superTweets.data");
        try {
			superTweetFile.createNewFile();
		} catch (IOException e1) {
			System.err.println("Unable to Create superTweets.data");
			System.exit(0);
		}
        FileOutputStream superTweetStream = null;
        FileInputStream superTweetInputStream = null;
        ObjectOutputStream superTweetWriter = null;
        ObjectInputStream superTweetReader = null;
        List<Tweet> tweets = null;
    	int trendsListSize, hourlyTrendArraySize, resultsSize;
    	GregorianCalendar origin = new GregorianCalendar();
        try {
        	superTweetInputStream = new FileInputStream(superTweetFile);
		} catch (FileNotFoundException e1) {
			System.err.println("File not found");
			System.exit(0);
		}
        try {
			superTweetReader = new ObjectInputStream(superTweetInputStream);
		} catch (IOException e2) {
			System.err.println("Unable to Initialize tweet reader");
			System.exit(0);
		}
        try {
			tweetTable = (TweetHashTable)superTweetReader.readObject();
		} catch (IOException e2) {
			System.err.println("Unable to Read superTweets.data");
			System.exit(0);
		} catch (ClassNotFoundException e2) {
			System.err.println("Unable to Read superTweets.data");
			System.exit(0);
		}
    	Date nextUpdate = origin.getTime();
    	for(;;)
    	{
    		origin.roll(Calendar.HOUR, true);
    		nextUpdate = origin.getTime();
    		trendsList = twitter.getDailyTrends();
	        trendsListSize = trendsList.size();
	        System.out.println("Assimilating Tweets... ");
	        for(int i = 0; i < 1/*trendsListSize*/; i++)
	        {
	        	System.out.println("" + (int)((double)i / (double)trendsListSize * 100) + "%");
	        	Trends hourlyTrends = trendsList.get(i);
				Trend[] hourlyTrendArray = hourlyTrends.getTrends();
				hourlyTrendArraySize = hourlyTrendArray.length;
				for(int j = 0; j < hourlyTrendArraySize; j++)
				{
					String trendName = hourlyTrendArray[j].getName();
					query = new Query(trendName);
			        query.setRpp(2);
			        query.setLang("en");
			        try
			        {
			        	tweets = twitter.search(query).getTweets();
			        }
			        catch (TwitterException e)
			        {
			        	continue;
			        }
					resultsSize = tweets.size();
					for(int k = 0; k < resultsSize; k++)
						tweetTable.add(new SuperTweet(tweets.get(k), trendName));
				}
	        }
	        // Save Hash Table
	        superTweetFile.delete();
	        try {
				superTweetFile.createNewFile();
			} catch (IOException e1) {
				System.err.println("Unable to Create superTweets.twt");
			}
	        try {
	        	superTweetStream = new FileOutputStream(superTweetFile);
			} catch (FileNotFoundException e1) {
				System.err.println("File not found");
			}
	        try {
	        	superTweetWriter = new ObjectOutputStream(superTweetStream);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
	        try {
				superTweetWriter.writeObject(tweetTable);
			} catch (IOException e1) {
				System.err.println("Unable to Write to superTweets.data");
			}
	        System.out.println("Done.");
	        System.out.println("Now: " + new Date() + "\nThen: " + nextUpdate);
	        while(new Date().before(nextUpdate))
	        {
	        	System.out.println("Waiting");
	        	try {
					Thread.sleep(10000);
				} catch (InterruptedException e) {
					System.err.println("Interrupted");
				}
	        }
    	}
	}
}
