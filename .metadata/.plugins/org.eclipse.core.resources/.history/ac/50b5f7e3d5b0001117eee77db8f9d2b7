import java.util.*;
import java.io.*;

import twitter4j.*;
public class TrendingTweetPuller {
	public static void main(String[] args) throws TwitterException {
		String tweetFile = "superTweets.data";
		TweetHashTable tweetTable = null;
		TwitterFactory twitterFactory = new TwitterFactory();
        Twitter twitter = twitterFactory.getInstance();
        ResponseList<Trends> trendsList;
        Query query;
        File superTweetsBackup = new File("superTweetsBackup.data");
        File superTweetsFile = new File(tweetFile);
        List<Tweet> tweets = null;
        Scanner tweetIn = null;
        FileOutputStream backupOut = null;
    	int trendsListSize, hourlyTrendArraySize, resultsSize;
    	GregorianCalendar origin = new GregorianCalendar();
    	System.out.println("Origin: " + origin.getTime());
        tweetTable = TweetHashTable.load(tweetFile);
    	Date nextUpdate;
    	for(;;)
    	{
    		// Create Backup
    		try
    		{
	    		superTweetsBackup.delete();
	    		try {
					superTweetsBackup.createNewFile();
				} catch (IOException e1) {
					System.err.println("Unable to Create Backup");
				}
	    		try {
					backupOut = new FileOutputStream(superTweetsBackup);
				} catch (FileNotFoundException e2) {
					System.err.println("Unable to Initialize Backup Output Stream");
				}
	    		try {
					tweetIn = new Scanner(superTweetsFile);
				} catch (FileNotFoundException e1) {
					System.err.println("Unable to Initialize Backup Input Stream from " + superTweetsFile);
				}
	    		while (tweetIn.hasNext())
	    		{
					try {
						backupOut.write(tweetIn.nextByte());
					} catch (IOException e1) {
						System.err.println("Unable to Write to Backup File: " + superTweetsFile);
					}
	    		}
	    		try {
					backupOut.flush();
				} catch (IOException e) {
					System.err.println("Backup Flush Failed to " + superTweetsFile);
				}
	    		try {
					backupOut.close();
				} catch (IOException e) {
					System.err.println("Failed to CLose Backup Output Stream");
				}
    		}
    		catch (NullPointerException e1)
    		{
    			System.err.println("Backup Failed");
    		}
    		
    		
    		System.out.println("Origin First: " + origin.getTime());
    		origin.roll(Calendar.HOUR, 1);
    		System.out.println("Origin Second: " + origin.getTime());
    		nextUpdate = origin.getTime();
    		trendsList = twitter.getDailyTrends();
	        trendsListSize = trendsList.size();
	        System.out.print("Assimilating Tweets... ");
	        for(int i = 0; i < trendsListSize; i++)
	        {
	        	//System.out.println("" + (int)((double)i / (double)trendsListSize * 100) + "%");
	        	Trends hourlyTrends = trendsList.get(i);
				Trend[] hourlyTrendArray = hourlyTrends.getTrends();
				hourlyTrendArraySize = hourlyTrendArray.length;
				for(int j = 0; j < hourlyTrendArraySize; j++)
				{
					String trendName = hourlyTrendArray[j].getName();
					query = new Query(trendName);
			        query.setRpp(2);
			        query.setLang("en");
			        try
			        {
			        	tweets = twitter.search(query).getTweets();
			        }
			        catch (TwitterException e)
			        {
			        	continue;
			        }
					resultsSize = tweets.size();
					for(int k = 0; k < resultsSize; k++)
						tweetTable.add(new SuperTweet(tweets.get(k), trendName));
				}
	        }
	        System.out.print("Done.\nSaving Tweets... ");
	        TweetHashTable.save(tweetFile, tweetTable);
	        System.out.println("Done.");
	        while(new Date().before(nextUpdate))
	        {
	        	try {
					Thread.sleep(10000);
				} catch (InterruptedException e) {
					System.err.println("Interrupted");
				}
	        }
    	}
	}
}
